// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright 2024 TCN Inc

/**
 * tcnapi/exile/gate/v2/public.proto
 *
 * Defines the public-facing API for the Exile Gate service, which serves as the
 * interface between client applications and the Operator platform.
 *
 * This proto file contains the definitions for services, messages, and enums
 * that make up the communication protocol for the Exile system.
 */

syntax = "proto3";

// This package is the public API for the Exile Gate service.
package tcnapi.exile.gate.v2;

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "tcnapi/exile/core/v2/entities.proto";
import "tcnapi/exile/gate/v2/entities.proto";

option go_package = "github.com/tcncloud/exileapi/tcnapi/exile/gate/v2;gatev2";

/**
 * The GateService provides a set of RPCs for the Exile Gate service.
 * The service requires mTLS authentication for secure client-server communications.
 *
 * Key responsibilities include:
 * - Client configuration and organization management
 * - Event handling for telephony, agent calls, and responses
 * - Job streaming and result submission
 * - Agent management and status tracking
 * - Call control operations (dialing, recording)
 * - Scrub list management for blocking specific content
 */
service GateService {
  // Initial configuration retrieval for client setup
  rpc GetClientConfiguration(GetClientConfigurationRequest) returns (GetClientConfigurationResponse) {
    option (google.api.http) = {get: "/tcnapi/exile/gate/v2/client_configuration"};
  }

  // Organization details retrieval
  rpc GetOrganizationInfo(GetOrganizationInfoRequest) returns (GetOrganizationInfoResponse) {
    option (google.api.http) = {get: "/tcnapi/exile/gate/v2/organization_info"};
  }

  rpc RotateCertificate(RotateCertificateRequest) returns (RotateCertificateResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/rotate_certificate"
      body: "*"
    };
  }

  /**
   * Periodic event polling (up to 4MB)
   * This is the primary method for receiving events from the Operator platform
   * The events are ExileTelephonyResult, ExileAgentCall, and ExileAgentResponse
   */
  rpc PollEvents(PollEventsRequest) returns (PollEventsResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/poll_events"
      body: "*"
    };
  }

  /**
   * Job streaming connection for receiving requests (jobs) from the Operator platform.
   * The connection should have the keep alive set to 10 seconds.
   * Provides a continuous stream of jobs that clients need to process.
   */
  rpc StreamJobs(StreamJobsRequest) returns (stream StreamJobsResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/stream_jobs"
      body: "*"
    };
  }

  /**
   * Job results submission (max 2MB)
   * Used to submit results for jobs received via StreamJobs.
   * The method can be called multiple times for the same job_id until end_of_transmission is set to true.
   */
  rpc SubmitJobResults(SubmitJobResultsRequest) returns (SubmitJobResultsResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/submit_job_results"
      body: "*"
    };
  }

  /**
   * Agent management operations
   * These methods allow for retrieval and modification of agent information and status.
   */
  // Get Agent status - retrieves the current state of an agent
  rpc GetAgentStatus(GetAgentStatusRequest) returns (GetAgentStatusResponse) {
    option (google.api.http) = {get: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/status"};
  }

  // Update Agent status - modifies an agent's availability state
  rpc UpdateAgentStatus(UpdateAgentStatusRequest) returns (UpdateAgentStatusResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/update_agent_status"
      body: "*"
    };
  }

  // List Agents - retrieves all agents in the organization as a stream
  rpc ListAgents(ListAgentsRequest) returns (stream ListAgentsResponse) {
    option (google.api.http) = {get: "/tcnapi/exile/gate/v2/agents"};
  }

  // Agent management - creates or updates agent information
  rpc UpsertAgent(UpsertAgentRequest) returns (UpsertAgentResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/upsert_agent"
      body: "*"
    };
  }

  // Get Agent by ID - retrieves agent details using internal ID
  rpc GetAgentById(GetAgentByIdRequest) returns (GetAgentByIdResponse) {
    option (google.api.http) = {get: "/tcnapi/exile/gate/v2/users/{user_id=user_id}"};
  }

  // Get Agent by Partner ID - retrieves agent details using partner's ID system
  rpc GetAgentByPartnerId(GetAgentByPartnerIdRequest) returns (GetAgentByPartnerIdResponse) {
    option (google.api.http) = {get: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}"};
  }

  // Add Agent Call Response - adds a response to an agent call that will be sent back with the
  // telephony result,
  rpc AddAgentCallResponse(AddAgentCallResponseRequest) returns (AddAgentCallResponseResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/add_agent_call_response"
      body: "*"
    };
  }

  // List Hunt Group Pause Codes - lists the pause codes defined for a hunt group
  rpc ListHuntGroupPauseCodes(ListHuntGroupPauseCodesRequest) returns (ListHuntGroupPauseCodesResponse) {
    option (google.api.http) = {get: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/list_hunt_group_pause_codes"};
  }

  // Put Call On Simple Hold - puts a call on simple hold
  rpc PutCallOnSimpleHold(PutCallOnSimpleHoldRequest) returns (PutCallOnSimpleHoldResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/put_call_on_simple_hold"
      body: "*"
    };
  }

  rpc TakeCallOffSimpleHold(TakeCallOffSimpleHoldRequest) returns (TakeCallOffSimpleHoldResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/take_call_off_simple_hold"
      body: "*"
    };
  }
  /**
   * Call control operations
   * These methods provide telephony functionality for making and managing calls.
   */
  // Dial a phone number - initiates an outbound call
  rpc Dial(DialRequest) returns (DialResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/dial"
      body: "*"
    };
  }
  rpc ListNCLRulesetNames(ListNCLRulesetNamesRequest) returns (ListNCLRulesetNamesResponse) {
    option (google.api.http) = {get: "/tcnapi/exile/gate/v2/list_ncl_ruleset_names"};
  }
  // Start recording a call
  rpc StartCallRecording(StartCallRecordingRequest) returns (StartCallRecordingResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/start_call_recording"
      body: "*"
    };
  }

  // Stop recording a call
  rpc StopCallRecording(StopCallRecordingRequest) returns (StopCallRecordingResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/stop_call_recording"
      body: "*"
    };
  }

  // Get recording status - checks if a call is currently being recorded
  rpc GetRecordingStatus(GetRecordingStatusRequest) returns (GetRecordingStatusResponse) {
    option (google.api.http) = {get: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/get_recording_status"};
  }

  /**
   * Scrub list management operations
   * These methods handle blocked content (phone numbers, emails, etc.)
   */
  // List all available scrub lists
  rpc ListScrubLists(ListScrubListsRequest) returns (ListScrubListsResponse) {
    option (google.api.http) = {get: "/tcnapi/exile/gate/v2/scrublists"};
  }

  // Add entries to a scrub list
  rpc AddScrubListEntries(AddScrubListEntriesRequest) returns (AddScrubListEntriesResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/scrublists/{scrub_list_id}/add_entries"
      body: "*"
    };
  }

  // Update an existing scrub list entry
  rpc UpdateScrubListEntry(UpdateScrubListEntryRequest) returns (UpdateScrubListEntryResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/scrublists/{scrub_list_id}/update_entry"
      body: "*"
    };
  }

  // Remove entries from a scrub list
  rpc RemoveScrubListEntries(RemoveScrubListEntriesRequest) returns (RemoveScrubListEntriesResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/scrublists/{scrub_list_id}/remove_entries"
      body: "*"
    };
  }
  /**
   * Skill management operations
   * These methods handle skill management for agents
   */
  // List all available skills in an organization
  rpc ListSkills(ListSkillsRequest) returns (ListSkillsResponse) {
    option (google.api.http) = {get: "/tcnapi/exile/gate/v2/skills"};
  }
  // List all skills assigned to an agent, and their proficiency
  rpc ListAgentSkills(ListAgentSkillsRequest) returns (ListAgentSkillsResponse) {
    option (google.api.http) = {get: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/skills"};
  }
  // Assign a skill to an agent
  rpc AssignAgentSkill(AssignAgentSkillRequest) returns (AssignAgentSkillResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/assign_skill"
      body: "*"
    };
  }
  // Unassign a skill from an agent
  rpc UnassignAgentSkill(UnassignAgentSkillRequest) returns (UnassignAgentSkillResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/agents/{partner_agent_id=partner_agent_id}/unassign_skill"
      body: "*"
    };
  }
  /**
   * Logging operations
   */
  rpc Log(LogRequest) returns (LogResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/log"
      body: "*"
    };
  }

  /**
   * Voice recording retrieval operations
   */
  // Search for voice recordings
  rpc SearchVoiceRecordings(SearchVoiceRecordingsRequest) returns (stream SearchVoiceRecordingsResponse) {
    option (google.api.http) = {
      post: "/tcnapi/exile/gate/v2/search_voice_recordings"
      body: "*"
    };
  }

  // Get a voice recording download link
  rpc GetVoiceRecordingDownloadLink(GetVoiceRecordingDownloadLinkRequest) returns (GetVoiceRecordingDownloadLinkResponse) {
    option (google.api.http) = {
      get: "/tcnapi/exile/gate/v2/get_voice_recording_download_link"
      body: "*"
    };
  }

  // Get a list of allowed searchable fields
  rpc ListSearchableRecordingFields(ListSearchableRecordingFieldsRequest) returns (ListSearchableRecordingFieldsResponse) {
    option (google.api.http) = {
      get: "/tcnapi/exile/gate/v2/list_searchable_recording_fields"
      body: "*"
    };
  }
}

// TimeRange represents an inclusive time interval for filtering logs.
message TimeRange {
  // Start of the time range (inclusive).
  google.protobuf.Timestamp start_time = 1;
  // End of the time range (inclusive).
  google.protobuf.Timestamp end_time = 2;
}

/**
 * Request message for logging operations.
 */
message LogRequest {
  string payload = 1; // log messages to be sent
}

message LogResponse {}

/**
 * Request message for polling events from the system.
 * Used to retrieve telephony results, agent calls, and agent responses.
 */
message PollEventsRequest {
  int32 event_count = 10; // Maximum number of events to retrieve (default 100 if 0)
}

/**
 * Response message containing events retrieved from the system.
 */
message PollEventsResponse {
  repeated Event events = 1; // List of events (telephony results, agent calls, agent responses)
}

/**
 * Request message for initiating a job stream.
 * This is a simple message with no fields as the stream is initiated without parameters.
 */
message StreamJobsRequest {}

/**
 * Response message for the job stream.
 * Contains various job types that clients need to process.
 */
message StreamJobsResponse {
  string job_id = 1; // Unique identifier for the job

  // Different task types that can be requested
  oneof task {
    ListPoolsRequest list_pools = 10; // Request to list available pools
    GetPoolStatusRequest get_pool_status = 11; // Request to get status of a specific pool
    GetPoolRecordsRequest get_pool_records = 12; // Request to get records from a pool
    SearchRecordsRequest search_records = 13; // Request to search for records
    GetRecordFieldsRequest get_record_fields = 14; // Request to get field values from a record
    SetRecordFieldsRequest set_record_fields = 15; // Request to update field values in a record
    CreatePaymentRequest create_payment = 16; // Request to create a payment
    PopAccountRequest pop_account = 17; // Request to pop an account for an agent
    ExecuteLogicRequest execute_logic = 18; // Request to execute a logic block
    InfoRequest info = 100; // Request for system information
    SeppukuRequest shutdown = 101; // Request to shut down the client
    LoggingRequest logging = 102; // Request related to logging
    DiagnosticsRequest diagnostics = 103; // Request for diagnostics
    ListTenantLogsRequest list_tenant_logs = 104; // Request to list tenant logs
    SetLogLevelRequest set_log_level = 105; // Request to set log level for a specific logger
  }

  /**
   * Request message for listing all available pools.
   */
  message ListPoolsRequest {}

  /**
   * Request message for retrieving the status of a specific pool.
   */
  message GetPoolStatusRequest {
    string pool_id = 2; // ID of the pool to check
  }

  /**
   * Request message for retrieving records from a specific pool.
   */
  message GetPoolRecordsRequest {
    string pool_id = 2; // ID of the pool to get records from
  }

  /**
   * Request message for searching records based on lookup criteria and filters.
   */
  message SearchRecordsRequest {
    string lookup_type = 11; // Type of lookup to perform
    string lookup_value = 12; // Value to search for
    repeated tcnapi.exile.core.v2.Filter filters = 13; // Additional filters to apply
  }

  /**
   * Request message for retrieving field values from a specific record.
   */
  message GetRecordFieldsRequest {
    string pool_id = 2; // ID of the pool containing the record
    string record_id = 3; // ID of the record to retrieve fields from
    repeated string field_names = 4; // Names of the fields to retrieve
    repeated tcnapi.exile.core.v2.Filter filters = 5; // Additional filters (e.g., table_id for finvi)
  }

  /**
   * Request message for updating field values in a specific record.
   */
  message SetRecordFieldsRequest {
    string pool_id = 2; // ID of the pool containing the record
    string record_id = 3; // ID of the record to update
    repeated tcnapi.exile.core.v2.Field fields = 4; // Fields to update with new values
    repeated tcnapi.exile.core.v2.Filter filters = 5; // Additional filters (e.g., table_id for finvi)
  }

  /**
   * Request message for executing a logic block with parameters.
   */
  message ExecuteLogicRequest {
    string logic_block_id = 2; // ID of the logic block to execute
    string logic_block_params = 3; // JSON serialized parameters for the logic block
  }

  /**
   * Request message for creating a payment for a record.
   */
  message CreatePaymentRequest {
    string pool_id = 2; // ID of the pool containing the record
    string record_id = 3; // ID of the record to create payment for
    string payment_id = 4; // Unique identifier for the payment
    string payment_type = 5; // Type of payment (e.g., credit card, ACH)
    string payment_amount = 6; // Amount of the payment
    google.protobuf.Timestamp payment_date = 7; // Date when the payment was made
  }

  /**
   * Request message for popping an account for an agent.
   */
  message PopAccountRequest {
    string partner_agent_id = 1; // ID of the agent in the partner's system
    string pool_id = 2; // ID of the pool containing the record
    string record_id = 3; // ID of the record to pop
    string call_sid = 4; // Session ID of the call
    CallType call_type = 5; // Type of call (inbound, outbound)
    // AlternateID (usually the caller_id)
    repeated tcnapi.exile.core.v2.Filter filters = 6;
  }

  /**
   * Request message for retrieving system information.
   */
  message InfoRequest {}

  /**
   * Request message for shutting down the client.
   */
  message SeppukuRequest {}

  /**
   * Request message related to logging.
   */
  message LoggingRequest {
    bool stream_logs = 1; // Whether to stream logs to exile gate
    repeated LoggerLevel logger_levels = 2; // Logger levels to set
    message LoggerLevel {
      string logger_name = 1; // Name of the logger (usually the class name)
      Level logger_level = 2; // Level to set for the logger
      enum Level {
        DISABLED = 0;
        ERROR = 1;
        WARN = 2;
        INFO = 3;
        DEBUG = 4;
        TRACE = 5;
        FATAL = 6;
      }
    }
  }

  /**
   * Request message for diagnostics request.
   * Empty response indicates successful diagnostics.
   */
  message DiagnosticsRequest {}

  /**
   * Request message for listing tenant logs.
   * Contains time range parameters for filtering logs.
   */
  message ListTenantLogsRequest {
    // Optional time range for filtering logs
    TimeRange time_range = 1;
  }

  /**
   * Request message for setting log level for a specific logger.
   */
  message SetLogLevelRequest {
    string log = 1; // Name of the logger to set level for
    LogLevel log_level = 2; // Log level to set

    enum LogLevel {
      DEBUG = 0;
      INFO = 1;
      WARNING = 2;
      ERROR = 3;
      FATAL = 4;
    }
  }
}

/**
 * Request message for submitting job results back to the system.
 * Used to respond to jobs received via StreamJobs.
 */
message SubmitJobResultsRequest {
  string job_id = 2; // ID of the job being responded to
  bool end_of_transmission = 3; // Whether this is the final response for this job

  // Different result types that can be returned
  oneof result {
    ListPoolsResult list_pools_result = 10; // Result of listing pools
    GetPoolStatusResult get_pool_status_result = 11; // Result of getting pool status
    GetPoolRecordsResult get_pool_records_result = 12; // Result of getting pool records
    SearchRecordResult search_record_result = 13; // Result of searching records
    GetRecordFieldsResult get_record_fields_result = 14; // Result of getting record fields
    SetRecordFieldsResult set_record_fields_result = 15; // Result of setting record fields
    CreatePaymentResult create_payment_result = 16; // Result of creating a payment
    PopAccountResult pop_account_result = 17; // Result of popping an account
    ExecuteLogicResult execute_logic_result = 18; // Result of executing logic
    ErrorResult error_result = 21; // Error information if the job failed
    InfoResult info_result = 22; // System information result
    SeppukuResult shutdown_result = 23; // Result of shutdown request
    LoggingResult logging_result = 24; // Result of logging request
    DiagnosticsResult diagnostics_result = 25; // Result of diagnostics request
    ListTenantLogsResult list_tenant_logs_result = 26; // Result of listing tenant logs
    SetLogLevelResult set_log_level_result = 27; // Result of setting log level
  }

  /**
   * Result message for executing a logic block.
   */
  message ExecuteLogicResult {
    string result = 1; // Result of the logic execution
  }

  /**
   * Result message for listing pools.
   */
  message ListPoolsResult {
    repeated tcnapi.exile.core.v2.Pool pools = 1; // List of available pools
  }

  /**
   * Result message for getting pool status.
   */
  message GetPoolStatusResult {
    tcnapi.exile.core.v2.Pool pool = 1; // Pool with status information
  }

  /**
   * Result message for getting pool records.
   */
  message GetPoolRecordsResult {
    repeated tcnapi.exile.core.v2.Record records = 1; // Records from the requested pool
  }

  /**
   * Result message for searching records.
   */
  message SearchRecordResult {
    repeated tcnapi.exile.core.v2.Record records = 1; // Records matching the search criteria
  }

  /**
   * Result message for getting record fields.
   */
  message GetRecordFieldsResult {
    repeated tcnapi.exile.core.v2.Field fields = 1; // Fields retrieved from the record
  }

  /**
   * Result message for setting record fields.
   * Empty response indicates success.
   */
  message SetRecordFieldsResult {}

  /**
   * Result message for creating a payment.
   * Empty response indicates success.
   */
  message CreatePaymentResult {}

  /**
   * Result message for popping an account.
   * Empty response indicates success.
   */
  message PopAccountResult {}

  /**
   * Result message for reporting an error.
   */
  message ErrorResult {
    string message = 1; // Error message describing what went wrong
  }

  /**
   * Result message for system information.
   * Empty response with information typically in headers.
   */
  message InfoResult {
    string core_version = 1; // Version of the server
    string server_name = 2; // Name of the server
    string plugin_version = 3; // Version of the plugin
    string plugin_name = 4; // Name of the plugin
  }

  /**
   * Result message for diagnostics request.
   * Contains comprehensive system information about the running application.
   */
  message DiagnosticsResult {
    google.protobuf.Timestamp timestamp = 1; // Timestamp when diagnostics were collected
    string hostname = 2; // System hostname
    OperatingSystem operating_system = 3; // Operating system information
    JavaRuntime java_runtime = 4; // Java runtime information
    Hardware hardware = 5; // Hardware information
    Memory memory = 6; // Memory usage information
    repeated Storage storage = 7; // Storage devices and partitions
    Container container = 8; // Container information (if running in container)
    EnvironmentVariables environment_variables = 9; // Environment variables
    SystemProperties system_properties = 10; // System properties
    repeated HikariPoolMetrics hikari_pool_metrics = 11; // Hikari pool metrics
    ConfigDetails config_details = 12; // Config details
    EventStreamStats event_stream_stats = 13; // Event stream statistics
    message OperatingSystem {
      string name = 1; // OS name (e.g., "Linux", "Windows")
      string version = 2; // OS version
      string architecture = 3; // System architecture (e.g., "aarch64", "x86_64")
      string manufacturer = 4; // OS manufacturer
      int32 available_processors = 5; // Number of available processors
      int64 system_uptime = 6; // System uptime in seconds
      double system_load_average = 7; // System load average
      int64 total_physical_memory = 8; // Total physical memory in bytes
      int64 available_physical_memory = 9; // Available physical memory in bytes
      int64 total_swap_space = 10; // Total swap space in bytes (-1 if not available)
      int64 available_swap_space = 11; // Available swap space in bytes (-1 if not available)
    }
    message JavaRuntime {
      string version = 1; // Java version
      string vendor = 2; // Java vendor
      string runtime_name = 3; // Runtime name
      string vm_name = 4; // VM name
      string vm_version = 5; // VM version
      string vm_vendor = 6; // VM vendor
      string specification_name = 7; // Specification name
      string specification_version = 8; // Specification version
      string class_path = 9; // Java class path
      string library_path = 10; // Java library path
      repeated string input_arguments = 11; // JVM input arguments
      int64 uptime = 12; // JVM uptime in milliseconds
      int64 start_time = 13; // JVM start time in milliseconds since epoch
      string management_spec_version = 14; // Management specification version
    }
    message Hardware {
      string model = 1; // Hardware model
      string manufacturer = 2; // Hardware manufacturer
      string serial_number = 3; // Hardware serial number
      string uuid = 4; // Hardware UUID
      Processor processor = 5; // Processor information
    }
    message Processor {
      string name = 1; // Processor name
      string identifier = 2; // Processor identifier
      string architecture = 3; // Processor architecture
      int32 physical_processor_count = 4; // Number of physical processors
      int32 logical_processor_count = 5; // Number of logical processors
      int64 max_frequency = 6; // Maximum frequency in Hz (-1 if unknown)
      bool cpu_64bit = 7; // Whether the CPU is 64-bit
    }
    message Memory {
      int64 heap_memory_used = 1; // Used heap memory in bytes
      int64 heap_memory_max = 2; // Maximum heap memory in bytes
      int64 heap_memory_committed = 3; // Committed heap memory in bytes
      int64 non_heap_memory_used = 4; // Used non-heap memory in bytes
      int64 non_heap_memory_max = 5; // Maximum non-heap memory in bytes (-1 if unlimited)
      int64 non_heap_memory_committed = 6; // Committed non-heap memory in bytes
      repeated MemoryPool memory_pools = 7; // Memory pool information
    }
    message MemoryPool {
      string name = 1; // Memory pool name
      string type = 2; // Memory pool type (e.g., "Heap memory", "Non-heap memory")
      int64 used = 3; // Used memory in bytes
      int64 max = 4; // Maximum memory in bytes (-1 if unlimited)
      int64 committed = 5; // Committed memory in bytes
    }
    message Storage {
      string name = 1; // Storage device name
      string type = 2; // Storage device type (e.g., "disk")
      string model = 3; // Storage device model
      string serial_number = 4; // Storage device serial number
      int64 size = 5; // Storage device size in bytes
    }
    message Container {
      bool is_container = 1; // Whether running in a container
      string container_type = 2; // Container type (e.g., "docker")
      string container_id = 3; // Container ID
      string container_name = 4; // Container name
      string image_name = 5; // Container image name
      map<string, string> resource_limits = 6; // Resource limits imposed by the container
    }
    message EnvironmentVariables {
      string language = 1; // LANGUAGE
      string path = 2; // PATH
      string hostname = 3; // HOSTNAME
      string lc_all = 4; // LC_ALL
      string java_home = 5; // JAVA_HOME
      string java_version = 6; // JAVA_VERSION
      string lang = 7; // LANG
      string home = 8; // HOME
    }
    message SystemProperties {
      // Java Specification
      string java_specification_version = 1; // java.specification.version
      string java_specification_vendor = 2; // java.specification.vendor
      string java_specification_name = 3; // java.specification.name
      string java_specification_maintenance_version = 4; // java.specification.maintenance.version

      // Java Version Info
      string java_version = 5; // java.version
      string java_version_date = 6; // java.version.date
      string java_vendor = 7; // java.vendor
      string java_vendor_version = 8; // java.vendor.version
      string java_vendor_url = 9; // java.vendor.url
      string java_vendor_url_bug = 10; // java.vendor.url.bug

      // Java Runtime
      string java_runtime_name = 11; // java.runtime.name
      string java_runtime_version = 12; // java.runtime.version
      string java_home = 13; // java.home
      string java_class_path = 14; // java.class.path
      string java_library_path = 15; // java.library.path
      string java_class_version = 16; // java.class.version

      // Java VM
      string java_vm_name = 17; // java.vm.name
      string java_vm_version = 18; // java.vm.version
      string java_vm_vendor = 19; // java.vm.vendor
      string java_vm_info = 20; // java.vm.info
      string java_vm_specification_version = 21; // java.vm.specification.version
      string java_vm_specification_vendor = 22; // java.vm.specification.vendor
      string java_vm_specification_name = 23; // java.vm.specification.name
      string java_vm_compressed_oops_mode = 24; // java.vm.compressedOopsMode

      // Operating System
      string os_name = 25; // os.name
      string os_version = 26; // os.version
      string os_arch = 27; // os.arch

      // User Info
      string user_name = 28; // user.name
      string user_home = 29; // user.home
      string user_dir = 30; // user.dir
      string user_timezone = 31; // user.timezone
      string user_country = 32; // user.country
      string user_language = 33; // user.language

      // File System
      string file_separator = 34; // file.separator
      string path_separator = 35; // path.separator
      string line_separator = 36; // line.separator
      string file_encoding = 37; // file.encoding
      string native_encoding = 38; // native.encoding

      // Sun/Oracle Specific
      string sun_jnu_encoding = 39; // sun.jnu.encoding
      string sun_arch_data_model = 40; // sun.arch.data.model
      string sun_java_launcher = 41; // sun.java.launcher
      string sun_boot_library_path = 42; // sun.boot.library.path
      string sun_java_command = 43; // sun.java.command
      string sun_cpu_endian = 44; // sun.cpu.endian
      string sun_management_compiler = 45; // sun.management.compiler
      string sun_io_unicode_encoding = 46; // sun.io.unicode.encoding

      // JDK/Debug
      string jdk_debug = 47; // jdk.debug
      string java_io_tmpdir = 48; // java.io.tmpdir

      // Application Specific
      string env = 49; // env (custom property)
      string micronaut_classloader_logging = 50; // micronaut.classloader.logging

      // Third Party Libraries
      string io_netty_allocator_max_order = 51; // io.netty.allocator.maxOrder
      string io_netty_process_id = 52; // io.netty.processId
      string io_netty_machine_id = 53; // io.netty.machineId
      string com_zaxxer_hikari_pool_number = 54; // com.zaxxer.hikari.pool_number
    }
    message HikariPoolMetrics {
      string pool_name = 1; // Name of the connection pool
      int32 active_connections = 2; // Number of active connections in the pool
      int32 idle_connections = 3; // Number of idle connections in the pool
      int32 total_connections = 4; // Total number of connections in the pool
      int32 threads_awaiting_connection = 5; // Number of threads waiting for a connection

      // Pool configuration
      PoolConfig pool_config = 6; // Connection pool configuration if available

      // Extended metrics from Dropwizard if available
      map<string, string> extended_metrics = 7; // Additional metrics from Dropwizard

      message PoolConfig {
        string pool_name = 1; // Pool name
        int64 connection_timeout = 2; // Connection timeout in milliseconds
        int64 validation_timeout = 3; // Validation timeout in milliseconds
        int64 idle_timeout = 4; // Idle timeout in milliseconds
        int64 max_lifetime = 5; // Maximum connection lifetime in milliseconds
        int32 minimum_idle = 6; // Minimum number of idle connections
        int32 maximum_pool_size = 7; // Maximum pool size
        int64 leak_detection_threshold = 8; // Leak detection threshold in milliseconds
        string jdbc_url = 9; // JDBC URL (may be redacted for security)
        string username = 10; // Database username (may be redacted for security)
      }
    }
    message ConfigDetails {
      string api_endpoint = 1; // API endpoint from the config file
      string certificate_name = 2; // Certificate name from the config file
      string certificate_description = 3; // Certificate description from the config file
    }
    message EventStreamStats {
      string stream_name = 1; // Name of the event stream
      string status = 2; // Status of the event stream (e.g., "running", "stopped")
      int32 max_jobs = 3; // Maximum number of jobs that can be processed simultaneously
      int32 running_jobs = 4; // Number of currently running jobs
      int64 completed_jobs = 5; // Total number of completed jobs
      int32 queued_jobs = 6; // Number of jobs currently queued
    }
  }

  /**
   * Result message for shutting down the client.
   * Empty response indicates successful shutdown initiation.
   */
  message SeppukuResult {}

  /**
   * Result message for logging request.
   * Empty response indicates successful log processing.
   */
  message LoggingResult {}

  /**
   * Result message for listing tenant logs.
   * Contains log groups with logs and metadata.
   */
  message ListTenantLogsResult {
    repeated LogGroup log_groups = 1; // List of log groups
    string next_page_token = 2; // Token for pagination

    message LogGroup {
      string name = 1; // Name of the log group
      repeated string logs = 2; // List of log messages
      TimeRange time_range = 3; // Time range for the logs
      map<string, LogLevel> log_levels = 4; // Log levels for different components

      enum LogLevel {
        DEBUG = 0;
        INFO = 1;
        WARNING = 2;
        ERROR = 3;
        FATAL = 4;
      }
    }
  }

  /**
   * Result message for setting log level.
   * Contains the updated tenant information.
   */
  message SetLogLevelResult {
    Tenant tenant = 1; // The tenant that was updated

    message Tenant {
      string name = 1; // The name of the tenant. name will be in the format {org_id}::{unique_identifier}
      string sati_version = 2; // The version of the tenant
      string plugin_version = 3; // The version of the plugin
      google.protobuf.Timestamp update_time = 4; // The time when the tenant was last updated
      string connected_gate = 5; // The gate the tenant is connected with. will be empty if the tenant is not connected
    }
  }
}

/**
 * Response message for submitting job results.
 * Empty message indicates successful receipt of the results.
 */
message SubmitJobResultsResponse {}

/**
 * Message representing an event from the system.
 * Events can be agent calls, telephony results, or agent responses.
 */
message Event {
  oneof entity {
    ExileAgentCall agent_call = 10; // Event related to an agent call
    ExileTelephonyResult telephony_result = 11; // Event related to telephony results
    ExileAgentResponse agent_response = 12; // Event related to an agent response
    ExileTransferInstance transfer_instance = 13; // Event related to a transfer instance
  }
}

/**
 * Request message for removing entries from a scrub list.
 */
message RemoveScrubListEntriesRequest {
  string scrub_list_id = 1; // ID of the scrub list to modify
  repeated string entries = 2; // Content entries to remove
}

/**
 * Response message for removing scrub list entries.
 * Empty message indicates successful removal.
 */
message RemoveScrubListEntriesResponse {}

/**
 * Request message for updating a scrub list entry.
 */
message UpdateScrubListEntryRequest {
  string scrub_list_id = 1; // ID of the scrub list containing the entry
  google.protobuf.StringValue notes = 10; // Optional notes about the entry
  string content = 11; // Content to be blocked (phone number, email, etc.)
  google.protobuf.Timestamp expiration = 12; // When the entry should expire
  google.protobuf.StringValue country_code = 13; // Optional country code for phone numbers
}

/**
 * Response message for updating a scrub list entry.
 * Empty message indicates successful update.
 */
message UpdateScrubListEntryResponse {}

/**
 * Request message for adding entries to a scrub list.
 */
message AddScrubListEntriesRequest {
  string scrub_list_id = 1; // ID of the scrub list to add entries to
  repeated Entry entries = 10; // Entries to add to the scrub list
  string country_code = 11; // Default country code for all entries if applicable

  /**
   * Message representing a single scrub list entry.
   */
  message Entry {
    string content = 1; // Content to be blocked (phone number, email, etc.)
    google.protobuf.Timestamp expiration = 2; // When the entry should expire
    google.protobuf.StringValue notes = 3; // Optional notes about the entry
  }
}

/**
 * Response message for adding scrub list entries.
 * Empty message indicates successful addition.
 */
message AddScrubListEntriesResponse {}

/**
 * Request message for listing available scrub lists.
 * Empty message as no parameters are needed.
 */
message ListScrubListsRequest {}

/**
 * Response message for listing scrub lists.
 */
message ListScrubListsResponse {
  repeated ScrubList scrub_lists = 1; // List of available scrub lists
}

/**
 * Message representing a scrub list for blocking specific content.
 */
message ScrubList {
  string scrub_list_id = 1; // Unique identifier for the scrub list
  bool read_only = 2; // Whether the list can be modified
  ContentType content_type = 3; // Type of content this list blocks

  /**
   * Enumeration of content types that can be blocked by scrub lists.
   */
  enum ContentType {
    PHONE_NUMBER = 0; // Blocks phone numbers
    EMAIL = 1; // Blocks email addresses
    SMS = 2; // Blocks SMS numbers/content
    OTHER = 3; // Blocks other content types
    ACCOUNT_NUMBER = 4; // Blocks account numbers
    WHATSAPP = 5; // Blocks WhatsApp numbers/accounts
  }
}

/**
 * Request message for retrieving client configuration.
 * Empty message as no parameters are needed.
 */
message GetClientConfigurationRequest {}

/**
 * Response message containing client configuration information.
 */
message GetClientConfigurationResponse {
  string org_id = 1; // Organization identifier
  string org_name = 2; // Organization name
  string config_name = 6; // Name of the configuration
  string config_payload = 7; // Configuration data payload
}

/**
 * Request message for retrieving organization information.
 * Empty message as no parameters are needed.
 */
message GetOrganizationInfoRequest {}

/**
 * Response message containing organization information.
 */
message GetOrganizationInfoResponse {
  string org_id = 1; // Organization ID
  string org_name = 2; // Organization name
}

/**
 * Request message for rotating a certificate for an organization.
 */
message RotateCertificateRequest {
  // hash of the current certificate that needs to be rotated
  string certificate_hash = 1;
}

/**
 * Response message containing the updated encoded certificate.
 */
message RotateCertificateResponse {
  // the base-64 encoded certificate that we rotated to
  string encoded_certificate = 1;
}

/**
 * Request message for retrieving call recording status.
 */
message GetRecordingStatusRequest {
  string partner_agent_id = 1; // ID of the user/agent to check recording status for
}

/**
 * Response message containing call recording status.
 */
message GetRecordingStatusResponse {
  bool is_recording = 1; // Whether the call is currently being recorded
}

/**
 * Request message for creating or updating an agent.
 */
message UpsertAgentRequest {
  string username = 1; // Username for the agent
  string partner_agent_id = 2; // ID of the agent in the partner's system
  string first_name = 3; // Agent's first name
  string last_name = 4; // Agent's last name
  string password = 5; // Agent's password
}

/**
 * Response message for creating or updating an agent.
 */
message UpsertAgentResponse {
  Agent agent = 1; // The created or updated agent information
}

/**
 * Request message for retrieving an agent by partner ID.
 */
message GetAgentByPartnerIdRequest {
  string partner_agent_id = 1; // ID of the agent in the partner's system
}

/**
 * Response message containing agent information by partner ID.
 */
message GetAgentByPartnerIdResponse {
  Agent agent = 1; // Agent information
}

/**
 * Request message for retrieving an agent by internal ID.
 */
message GetAgentByIdRequest {
  string user_id = 1; // Internal ID of the agent
}

/**
 * Response message containing agent information by internal ID.
 */
message GetAgentByIdResponse {
  Agent agent = 1; // Agent information
}

/**
 * Request message for stopping call recording.
 */
message StopCallRecordingRequest {
  string partner_agent_id = 1; // ID of the user/agent to stop recording for
}

/**
 * Response message for stopping call recording.
 * Empty message indicates successful stop.
 */
message StopCallRecordingResponse {}

/**
 * Request message for starting call recording.
 */
message StartCallRecordingRequest {
  string partner_agent_id = 1; // ID of the user/agent to start recording for
}

/**
 * Response message for starting call recording.
 * Empty message indicates successful start.
 */
message StartCallRecordingResponse {}

/**
 * Request message for saving details on a call response
 */
message AddAgentCallResponseRequest {
  string partner_agent_id = 1;
  string call_sid = 2;
  CallType call_type = 3;
  int64 current_session_id = 4;
  // key value pair to save
  string key = 6;
  string value = 7;
}
message AddAgentCallResponseResponse {}

/**
 * Request message for dialing a phone number.
 */
message DialRequest {
  string partner_agent_id = 1; // ID of the user/agent making the call
  string phone_number = 2; // Phone number to dial
  google.protobuf.StringValue caller_id = 3; // Caller ID to display
  google.protobuf.StringValue pool_id = 4; // Pool ID for the call
  google.protobuf.StringValue record_id = 5; // Record ID for the call
  // Ruleset name for the call. If provided this will override the ruleset in the huntgroup settings.
  google.protobuf.StringValue ruleset_name = 6;
  bool skip_compliance_checks = 7; // if true the call will ignore all call compliance rules.
}

/**
 * Response message for dialing a phone number.
 */
message DialResponse {
  string phone_number = 1; // Phone number that was dialed
  string caller_id = 2; // Caller ID that was used
  string call_sid = 3; // Session ID for the call
  CallType call_type = 4; // Type of call (inbound, outbound)
  string org_id = 5; // Organization ID making the call
  string partner_agent_id = 6; // Partner agent ID making the call
  bool attempted = 7; // will be true if the call attempted to start
  string status = 8; // if started is false this will contain why it was rejected
  // added for backwards compatibility with old gate protos.
  // this is just an alternate name for call_sid.
  // will be removed in a future version.
  string caller_sid = 9 [deprecated = true];
}

message ListNCLRulesetNamesRequest {}
message ListNCLRulesetNamesResponse {
  repeated string ruleset_names = 1;
}

/**
 * Request message for retrieving agent status.
 */
message GetAgentStatusRequest {
  string partner_agent_id = 1; // ID of the agent to check status
}

/**
 * Response message containing agent status information.
 */
message GetAgentStatusResponse {
  string partner_agent_id = 1; // ID of the agent
  AgentState agent_state = 10; // Current state of the agent
  int64 current_session_id = 11; // Current session ID if applicable
  ConnectedParty connected_party = 12; // Information about connected party if on call
}

/**
 * Message representing a party connected to an agent.
 */
message ConnectedParty {
  string call_sid = 1; // Session ID of the call
  CallType call_type = 2; // Type of call (inbound, outbound)
  bool is_inbound = 3; // Whether this is an inbound call
}

/**
 * Request message for updating agent status.
 */
message UpdateAgentStatusRequest {
  string partner_agent_id = 1; // ID of the agent to update
  AgentState new_state = 2; // New state to set for the agent
  string reason = 3;
}

/**
 * Response message for updating agent status.
 * Empty message indicates successful update.
 */
message UpdateAgentStatusResponse {}

/**
 * Request message for listing agents.
 * Empty message as no parameters are needed.
 */
message ListAgentsRequest {}

/**
 * Response message for listing agents (streamed).
 * Each response contains a single agent.
 */
message ListAgentsResponse {
  Agent agent = 1; // Single agent information
}

message ListHuntGroupPauseCodesRequest {
  string partner_agent_id = 1;
}

message ListHuntGroupPauseCodesResponse {
  string name = 1;
  string description = 2;
  repeated string pause_codes = 3;
}
message PutCallOnSimpleHoldRequest {
  string partner_agent_id = 2;
}
message PutCallOnSimpleHoldResponse {}

message TakeCallOffSimpleHoldRequest {
  string partner_agent_id = 2;
}
message TakeCallOffSimpleHoldResponse {}

/**
 * Message representing agent information.
 */
message Agent {
  string user_id = 1; // Internal ID of the agent
  string org_id = 2; // Organization ID the agent belongs to
  string first_name = 3; // Agent's first name
  string last_name = 4; // Agent's last name
  string username = 5; // Agent's username
  string partner_agent_id = 6; // ID of the agent in the partner's system
}

message ListSkillsRequest {}
message ListSkillsResponse {
  repeated Skill skills = 1;
}
message ListAgentSkillsRequest {
  string partner_agent_id = 1;
}
message ListAgentSkillsResponse {
  repeated Skill skills = 1;
}
message AssignAgentSkillRequest {
  string partner_agent_id = 1;
  string skill_id = 2;
  // the proficiency level to assign to the skill
  int64 proficiency = 3;
}
message AssignAgentSkillResponse {}
message UnassignAgentSkillRequest {
  string partner_agent_id = 1;
  string skill_id = 2;
}
message UnassignAgentSkillResponse {}

/**
 * Request message for searching voice recordings.
 */
message SearchVoiceRecordingsRequest {
  repeated SearchOption search_options = 1; // Optional. Structured search options for building the filter.
}

/**
 * Response message for searching voice recordings.
 */
message SearchVoiceRecordingsResponse {
  repeated Recording recordings = 1;
}

/**
 * Message representing a voice recording.
 */
message Recording {
  string name = 1; // The fully qualified resource name of the recording. Format: "orgs/{org}/regions/{region}/zones/{zone}/recordings/{recording}"
  int64 call_sid = 2; // The unique identifier of the call recorded.
  CallType call_type = 3; // The type of call recorded.
  google.protobuf.Duration duration = 4; // The duration of the recording.
  string agent_phone = 5; // The phone number of the agent.
  string client_phone = 6; // The phone number of the client.
  string campaign = 7; // The name of the campaign.
  RecordingType recording_type = 8; // The type of the recording.
  google.protobuf.Timestamp start_time = 9; // The start time of the recording.
  repeated string partner_agent_ids = 10; // The user IDs of participating agents.
}

/**
 * Enumeration of recording types.
 */
enum RecordingType {
  RECORDING_TYPE_TCN = 0;
  RECORDING_TYPE_EXTERNAL = 1;
  RECORDING_TYPE_VOICEMAIL = 2;
}

/**
 * Request message for getting a voice recording download link.
 */
message GetVoiceRecordingDownloadLinkRequest {
  string recording_id = 1; // The ID of the recording to get the download link for
}

/**
 * Response message for getting a voice recording download link.
 */
message GetVoiceRecordingDownloadLinkResponse {
  string download_link = 1; // The download link for the recording
}

message SearchOption {
  string field = 1; // The field to search on (see above for supported fields).
  Operator operator = 2; // The operator to use for comparison.
  string value = 3; // The value to compare against.
}

// Supported operators for search options.
enum Operator {
  OPERATOR_UNSPECIFIED = 0;
  EQUAL = 1; // =
  CONTAINS = 2; // :
  NOT_EQUAL = 3; // !=
}

/**
 * Request message for listing searchable recording fields.
 */
message ListSearchableRecordingFieldsRequest {}

/**
 * Response message for listing searchable recording fields.
 */
message ListSearchableRecordingFieldsResponse {
  repeated string fields = 1;
}
